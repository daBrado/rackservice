#!/usr/bin/env ruby

require './rackservice'

require 'minitest/spec'
require 'minitest/autorun'
require 'net/http'
require 'rack'
require 'stringio'

LOG = StringIO.new

class TestAPI < RackService::API
  def initialize
    @log = Logger.new(LOG)
    @log.formatter = RackService::LogFormatter
  end
  def log()
    LOG.reopen
    @log.info 'message'
    LOG.rewind
  end
  def get(param, name:nil)
    "get #{param} #{name}"
  end
  post
  def post(param, name:nil)
    "post #{param} #{name}"
  end
end

describe RackService do
  PORT = 4560
  before do
    @server = Thread.new{ Rack::Server.start(Port:PORT,app:RackService::App.new(TestAPI.new)) }
    loop { @server.join(0); break if (Net::HTTP.get_response('localhost', '/', PORT) rescue nil) }
  end
  it "can log" do
    http = Net::HTTP.new('localhost', PORT)
    req = Net::HTTP::Get.new('/log', {'User-Agent' => 'RackService MiniTest'})
    res = http.request(req)
    LOG.read.must_match /^[^\n]+ 127\.0\.0\.1 "-" "RackService MiniTest" log message\n$/
  end
  it "can get" do
    http = Net::HTTP.new('localhost', PORT)
    req = Net::HTTP::Get.new('/get/param?name=value')
    res = http.request(req)
    res.body.must_equal "get param value"
  end
  it "can post" do
    http = Net::HTTP.new('localhost', PORT)
    req = Net::HTTP::Post.new('/post/param')
    req.set_form_data({'name'=>'value'})
    res = http.request(req)
    res.body.must_equal "post param value"
  end
end
